CREATE OR REPLACE FUNCTION find_matching_places(
    _name varchar,
    _lat double precision,
    _lon double precision,
    _country_code varchar DEFAULT NULL,
    _population int DEFAULT NULL,
    _geonameid int DEFAULT NULL,
    _admin1_code varchar(20) DEFAULT NULL,
    _admin2_code varchar(20) DEFAULT NULL,
    _admin3_code varchar(20) DEFAULT NULL,
    _admin4_code varchar(20) DEFAULT NULL,
    _timezone varchar(40) DEFAULT NULL
)
RETURNS TABLE (
    id integer,
    admin1code varchar(100),
    admin2code varchar(101),
    admin3code varchar(102),
    admin4code varchar(103),
    admin_level int,
    asciiname varchar(2000),
    alternate_names varchar(10000),
    attribution varchar(1000),
    city varchar(1000),
    county varchar(1000),
    country varchar(1000),
    country_code varchar(2),
    dem varchar(1000),
    display_name varchar(504),
    elevation varchar(105),
    east float,
    geoname_feature_class varchar(1000),
    geoname_feature_code varchar(1000),
    geonameid bigint,
    geo_tag_id bigint,
    importance decimal,
    latitude float,
    longitude float,
    name varchar(2000),
    name_en varchar(2000),
    name_en_unaccented varchar(2000),
    normalized_name varchar(2000), /* unaccented and lowered */
    north float,
    osmname_class varchar(1000),
    osmname_id bigint,
    osmname_type varchar(1000),
    osm_type varchar(106),
    osm_id varchar(107),
    place_rank int,
    point geometry(Point,4326),
    population bigint,
    south float,
    state varchar(1000),
    street varchar(1000),
    timezone varchar(40),
    west float,
    wikidata varchar(108),
    wikipageid bigint,
    wikititle varchar(1000),
    wikiurl varchar(1000),
    within_1_meter boolean,
    within_10_meters boolean,
    within_100_meters boolean,
    within_1000_meters boolean,
    within_10000_meters boolean,
    population_exists boolean,
    population_is_close boolean,
    has_admin_level boolean
) AS $$
    SELECT
    *,
    within_x_meters(_lat, _lon, point, 1) AS within_1_meter,
    within_x_meters(_lat, _lon, point, 10) AS within_10_meters,
    within_x_meters(_lat, _lon, point, 100) AS within_100_meters,
    within_x_meters(_lat, _lon, point, 1000) AS within_1000_meters,
    within_x_meters(_lat, _lon, point, 10000) AS within_10000_meters,
    population IS NOT NULL AS population_exists,
    CASE WHEN population IS NOT NULL AND population > 0 THEN abs(_population - population)::decimal / GREATEST(_population, population)::decimal < 0.05 ELSE false END AS population_is_close,
    admin_level IS NOT NULL AS has_admin_level
    FROM places WHERE normalized_name = lower(unaccent(_name));
$$ LANGUAGE sql VOLATILE;

SELECT find_matching_places('Trenton', 0, 0);
